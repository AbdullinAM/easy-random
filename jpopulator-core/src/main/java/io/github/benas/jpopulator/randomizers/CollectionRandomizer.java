package io.github.benas.jpopulator.randomizers;

import io.github.benas.jpopulator.api.Randomizer;
import io.github.benas.jpopulator.util.ConstantsUtil;

import java.util.Collection;

/**
 * A base class for collection randomizers.
 *
 * @author Mahmoud Ben Hassine (mahmoud@benhassine.fr)
 */
public abstract class CollectionRandomizer<T> implements Randomizer<Collection<T>> {

    /**
     * The minimum number of elements to generate.
     */
    protected int minElements;

    /**
     * The maximum number of elements to generate.
     */
    protected int maxElements;

    /**
     * The number of elements to generate.
     */
    protected int nbElements;

    /**
     * The delegate randomizer used to generate elements.
     */
    protected Randomizer<T> elementRandomizer;

    /**
     * Default constructor which will generate a list with a random number of element.
     * Each element is generated by the {@link Randomizer} parameter
     *
     * @param elementRandomizer the randomizer to use to generate elements of the list
     */
    public CollectionRandomizer(final Randomizer<T> elementRandomizer) {
        this(elementRandomizer, 0, (byte) Math.abs((byte) (ConstantsUtil.RANDOM.nextInt())));
    }

    /**
     * Constructor which will generate a list with a fixed number of elements.
     * Each element is generated by the {@link Randomizer} parameter
     *
     * @param elementRandomizer The randomizer used to generate each element
     * @param nbElements        The number of elements in the list to generate
     */
    public CollectionRandomizer(final Randomizer<T> elementRandomizer, final int nbElements) {
        this(elementRandomizer, nbElements, nbElements);
    }

    /**
     * Constructor which will generate a list with a random number of elements.
     * Each element is generated by the {@link Randomizer} parameter
     *
     * @param elementRandomizer The randomizer used to generate each element
     * @param minElements       The minimum number of elements in the list to generate
     * @param maxElements       The maximum number of elements in the list to generate
     */
    public CollectionRandomizer(final Randomizer<T> elementRandomizer, final int minElements, final int maxElements) {
        checkArguments(minElements, maxElements);
        this.elementRandomizer = elementRandomizer;
        this.minElements = minElements;
        this.maxElements = maxElements + 1;
        nbElements = ConstantsUtil.RANDOM.nextInt(this.maxElements - this.minElements) + this.minElements;
    }

    protected void checkArguments(int minElements, int maxElements) {
        if (minElements < 0) {
            throw new IllegalArgumentException("The minimum number of elements to generate must be positive");
        }
        if (minElements < 1) {
            throw new IllegalArgumentException("The maximum number of elements to generate must be greater than or equal to 1");
        }
        if (maxElements < minElements) {
            throw new IllegalArgumentException("The maximum number of elements should be greater than or equal to the minimum number of elements.");
        }
    }

    protected T getRandomElement() {
        return elementRandomizer.getRandomValue();
    }

}
