/*
 * The MIT License
 *
 *   Copyright (c) 2016, Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
 *
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 *
 *   The above copyright notice and this permission notice shall be included in
 *   all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *   THE SOFTWARE.
 *
 */

package io.github.benas.jpopulator.randomizers;

import io.github.benas.jpopulator.api.Randomizer;
import io.github.benas.jpopulator.util.Constants;

import java.util.Collection;

/**
 * A base class for collection randomizers.
 *
 * @param <T> the type of elements in the collection
 * @author Mahmoud Ben Hassine (mahmoud.benhassine@icloud.com)
 */
public abstract class CollectionRandomizer<T> implements Randomizer<Collection<T>> {

    protected int minElements;

    protected int maxElements;

    protected int nbElements;

    protected Randomizer<T> elementRandomizer;

    /**
     * Default constructor which will generate a list with a random number of element.
     * Each element is generated by the {@link Randomizer} parameter
     *
     * @param elementRandomizer the randomizer to use to generate elements of the list
     */
    public CollectionRandomizer(final Randomizer<T> elementRandomizer) {
        this(elementRandomizer, 0, (byte) Math.abs((byte) (Constants.RANDOM.nextInt())));
    }

    /**
     * Constructor which will generate a list with a fixed number of elements.
     * Each element is generated by the {@link Randomizer} parameter
     *
     * @param elementRandomizer The randomizer used to generate each element
     * @param nbElements        The number of elements in the list to generate
     */
    public CollectionRandomizer(final Randomizer<T> elementRandomizer, final int nbElements) {
        this(elementRandomizer, nbElements, nbElements);
    }

    /**
     * Constructor which will generate a list with a random number of elements.
     * Each element is generated by the {@link Randomizer} parameter
     *
     * @param elementRandomizer The randomizer used to generate each element
     * @param minElements       The minimum number of elements in the list to generate
     * @param maxElements       The maximum number of elements in the list to generate
     */
    public CollectionRandomizer(final Randomizer<T> elementRandomizer, final int minElements, final int maxElements) {
        checkArguments(minElements, maxElements);
        this.elementRandomizer = elementRandomizer;
        this.minElements = minElements;
        this.maxElements = maxElements + 1;
        nbElements = Constants.RANDOM.nextInt(this.maxElements - this.minElements) + this.minElements;
    }

    protected void checkArguments(int minElements, int maxElements) {
        if (minElements < 0) {
            throw new IllegalArgumentException("The minimum number of elements to generate must be positive");
        }
        if (minElements < 1) {
            throw new IllegalArgumentException("The maximum number of elements to generate must be greater than or equal to 1");
        }
        if (maxElements < minElements) {
            throw new IllegalArgumentException("The maximum number of elements should be greater than or equal to the minimum number of elements.");
        }
    }

    protected T getRandomElement() {
        return elementRandomizer.getRandomValue();
    }

}
